
import android.app.ProgressDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.support.annotation.NonNull;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.widget.EditText;
import android.widget.Toast;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthEmailException;
import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException;
import com.google.firebase.auth.FirebaseAuthInvalidUserException;
import com.google.firebase.auth.FirebaseAuthWeakPasswordException;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.thetechroot.vision.CommonCl.SharedCommon;

import java.util.Iterator;
import java.util.Random;

import me.toptas.fancyshowcase.FancyShowCaseView;

public class ReferActivity extends AppCompatActivity implements ValueEventListener {

    private EditText txtRefer;

    private FirebaseAuth mAuth;

    private ProgressDialog mRegProgress;

    private FirebaseAuth auth;
    private DatabaseReference mDatabase;
    private String email;
    private String name;
    private String password;
    private String refer = "";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_refer);

        auth = FirebaseAuth.getInstance();
        mDatabase = FirebaseDatabase.getInstance().getReference();
        mDatabase.addValueEventListener(this);
        mRegProgress = new ProgressDialog(this);

        txtRefer = findViewById(R.id.txtRefer);

        name = getIntent().getStringExtra("name");
        email = getIntent().getStringExtra("email");
        password = getIntent().getStringExtra("password");

      
    }

    public void onRegister(View view) {
        refer = txtRefer.getText().toString().trim();

        mRegProgress.setTitle("Registering User");
        mRegProgress.setMessage("Please wait while we create your account !");
        mRegProgress.setCanceledOnTouchOutside(false);
        mRegProgress.show();

        register_user();
    }

    private void register_user() {
        auth.createUserWithEmailAndPassword(email, password)
                .addOnCompleteListener(ReferActivity.this, new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {
                        if (mRegProgress != null)
                            mRegProgress.dismiss();

//                        Toast.makeText(RegisterActivity.this, "createUserWithEmail:onComplete:" + task.isSuccessful(), Toast.LENGTH_SHORT).show();
                        if (!task.isSuccessful()) {
                            Toast.makeText(ReferActivity.this, "Authentication failed." + task.getException(),
                                    Toast.LENGTH_SHORT).show();
                        } else {
                            String uID = task.getResult().getUser().getUid();
//                            Random random = new Random();
//                            int rand = random.nextInt(999);
                            String referCode = randomString(5);
                            ReferUsers ReferUsers = new ReferUsers(uID, refer, referCode, 10);
                            mDatabase.child("users").child(uID).setValue(ReferUsers);

                            PrefsManager.getInstance(ReferActivity.this).setUID(uID);
                            SharedCommon.putSharedPreferencesString(ReferActivity.this,SharedCommon.keyname,name);

                            SharedCommon.putSharedPreferencesString(ReferActivity.this,SharedCommon.keyemail,email);


                            startActivity(new Intent(ReferActivity.this, ReferEarnActivity.class));
                            finish();
                        }
                    }
                }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception e) {
                if (e instanceof FirebaseAuthEmailException) {
                    mRegProgress.dismiss();
                    View parentLayout = findViewById(android.R.id.content);

                    Snackbar snackbar = Snackbar
                            .make(parentLayout, "Invalid Email ID" , Snackbar.LENGTH_SHORT);
                    View snackbarView = snackbar.getView();
                    snackbarView.setBackgroundColor(Color.parseColor("#FF104162"));


                    snackbar.show();
                } else if (e instanceof FirebaseAuthWeakPasswordException) {
                    mRegProgress.dismiss();
                    View parentLayout = findViewById(android.R.id.content);

                    Snackbar snackbar = Snackbar
                            .make(parentLayout, "Password should be at least 6 characters" , Snackbar.LENGTH_SHORT);
                    View snackbarView = snackbar.getView();
                    snackbarView.setBackgroundColor(Color.parseColor("#FF104162"));


                    snackbar.show();
                } else {
                    mRegProgress.dismiss();
                    Toast.makeText(ReferActivity.this, ""+e, Toast.LENGTH_LONG).show();
                }
                         }
        });
    }


    public static final String DATA = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    public static Random RANDOM = new Random();

    public static String randomString(int len) {
        StringBuilder sb = new StringBuilder(len);

        for (int i = 0; i < len; i++) {
            sb.append(DATA.charAt(RANDOM.nextInt(DATA.length())));
        }

        return sb.toString();
    }

    @Override
    public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
        if (refer == null)
            return;

        Iterator<DataSnapshot> children = dataSnapshot.child("users").getChildren().iterator();
        while (children.hasNext()){
            DataSnapshot d1 = children.next();
            ReferUsers ReferUsers = d1.getValue(ReferUsers.class);
            if (!ReferUsers.getuID().equals(PrefsManager.getInstance(ReferActivity.this).getUID())){
                if (ReferUsers.getMy_code().equals(refer)){
                    int money = ReferUsers.getMoney()+10;
                    ReferUsers user2 = new ReferUsers(ReferUsers.getuID(), ReferUsers.getRefer_code(), ReferUsers.getMy_code(), money);
                    mDatabase.child("users").child(ReferUsers.getuID()).setValue(user2);
                    refer = null;
                }
            }
        }
    }

    @Override
    public void onCancelled(@NonNull DatabaseError databaseError) {

    }
  
    

}

